<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="..\..\_Common\CodeModelUtils.ttinclude" #>
<#@ output extension=".Generated.cs" #>
<#
	if (Session.ContainsKey("InputFileName"))
	{
		FileCodeModel codeModel = GetCodeModel(Session["InputFileName"] as string);

		//WriteLine("/*");
		//DumpElements(codeModel.CodeElements);
		//WriteLine("*/");

		OutputUsings();
		ProcessElements(codeModel.CodeElements);
	} else {
		WriteLine("using System;");
		WriteLine("");
		WriteLine("//ncrunch: no coverage start");
		WriteLine("namespace " + ImplementNotifyPropertyChangedAttributeNamespace);
		WriteLine("{");
		PushIndent("\t");
		WriteLine("[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]");
		WriteLine("internal class " + ImplementNotifyPropertyChangedAttributeName + " : Attribute");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("public " + ImplementNotifyPropertyChangedAttributeName + "(Type aInterface)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("Interface = aInterface;");
		PopIndent();
        WriteLine("}");

        WriteLine("public Type Interface { get; private set; }");
		PopIndent();
        WriteLine("}");
		PopIndent();
        WriteLine("}");
		WriteLine("//ncrunch: no coverage end");
	}
#>
<#+
	const string ImplementNotifyPropertyChangedAttributeNamespace = "TemplateAttributes";
	const string ImplementNotifyPropertyChangedAttributeName = "ImplementNotifyPropertyChangedAttribute";
	const string ImplementNotifyPropertyChangedAttributeFullName = ImplementNotifyPropertyChangedAttributeNamespace + "." + ImplementNotifyPropertyChangedAttributeName;

	private void OutputUsings() 
	{
		WriteLine("using System;");
		WriteLine("using System.ComponentModel;");
		WriteLine("using System.Linq;");
		WriteLine("using System.Linq.Expressions;");
		WriteLine("");
	}

	private void ProcessClass(CodeClass codeClass, bool emptyLineBefore)
	{
		if (!IsPartialClass(codeClass)) return;

		List<CodeInterface> interfaces = GetClassNotifyInterfaces(codeClass);
		bool implementNotifyPropertyChanged = interfaces.Count > 0;

		if (emptyLineBefore) WriteLine("");
		OutputClassHeader(codeClass, implementNotifyPropertyChanged ? ": INotifyPropertyChanged, INotifyPropertyChanging" : "");

		if (implementNotifyPropertyChanged)
		{
			List<CodeFunction> changeMethods = GetClassChangeMethodes(codeClass);
			foreach (CodeInterface iface in interfaces)
				OutputInterfaceProperties(iface, changeMethods);
		}

		bool firstElement = true;
		foreach (CodeElement element in codeClass.Children)
		{
			CodeClass innerCodeClass = element as CodeClass;
			if (innerCodeClass != null)
			{
				ProcessClass(innerCodeClass, !firstElement);
				firstElement = false;
			}
		}

		if (implementNotifyPropertyChanged)
			OutputClassNotifyPropertyChangedImplementation(codeClass);

		OutputClassFooter(codeClass);
	}

	private List<CodeInterface> GetClassNotifyInterfaces(CodeClass codeClass)
	{
		return GetClassInterfaces(codeClass).Where(i => ClassHasAttributeForInterface(codeClass, i.Name)).ToList();
	}

	private bool ClassHasAttributeForInterface(CodeClass codeClass, string interfaceName)
	{
		string attrValue = "typeof(" + interfaceName + ")";
		return GetClassAttributes(codeClass).Any(a => a.FullName == ImplementNotifyPropertyChangedAttributeFullName && a.Value == attrValue);
	}

	private List<CodeFunction> GetClassChangeMethodes(CodeClass codeClass)
	{
		return GetClassFunctions(codeClass).Where(cf => cf.Name.StartsWith("On") && (cf.Name.EndsWith("Changed") || cf.Name.EndsWith("Changing"))).ToList();
	}

	private void OutputInterfaceProperties(CodeInterface codeInterface, List<CodeFunction> changeMethods)
	{
		WriteLine("#region " + codeInterface.Name);
		WriteLine("");
		foreach (CodeProperty codeProperty in codeInterface.Members.OfType<CodeProperty>())
		{
			OutputProperty(codeProperty, changeMethods, codeProperty.Setter == null);
			WriteLine("");
		}
		WriteLine("#endregion");
	}

	private void OutputProperty(CodeProperty codeProperty, List<CodeFunction> changeMethods, bool setterPrivate)
	{
		string propertyTypeName = codeProperty.Type.CodeType.FullName;
		string storeName = "_" + codeProperty.Name;
		WriteLine("private " + propertyTypeName + " " + storeName + ";");
		WriteLine("public " + propertyTypeName + " " + codeProperty.Name);
		WriteLine("{");
		PushIndent("\t");

		if (codeProperty.Getter != null)
			WriteLine("get { return " + storeName + "; }");

		string changeCommand = "";
		if (setterPrivate)
			changeCommand += "private ";
		changeCommand += "set { ChangeProperty<" + propertyTypeName + ">(\"" + codeProperty.Name + "\", ref " + storeName + ", value";
		CodeFunction codeFunction = changeMethods.FirstOrDefault(cf => cf.Name == "On" + codeProperty.Name + "Changing");
		if (codeFunction != null)
		{
			if (codeFunction.Parameters.Count == 2)
				changeCommand += ", changingCallback: " + codeFunction.Name;
			else
				changeCommand += ", changingCallback: " + "(o, n) => " + codeFunction.Name + "()";
        }
		codeFunction = changeMethods.FirstOrDefault(cf => cf.Name == "On" + codeProperty.Name + "Changed");
		if (codeFunction != null)
		{
			if (codeFunction.Parameters.Count == 2)
				changeCommand += ", changedCallback: " + codeFunction.Name;
			else
				changeCommand += ", changedCallback: " + "(o, n) => " + codeFunction.Name + "()";
        }
		changeCommand += "); }";
		WriteLine(changeCommand);

		PopIndent();
		WriteLine("}");
	}

	private void OutputClassNotifyPropertyChangedImplementation(CodeClass codeClass)
	{
		WriteLine("");
		WriteLine("#region INotifyPropertyChanged implementation");
		WriteLine("//ncrunch: no coverage start");
		WriteLine("");
		WriteLine("public event PropertyChangedEventHandler PropertyChanged;");
		WriteLine("public event PropertyChangingEventHandler PropertyChanging;");
		WriteLine("protected virtual void RaisePropertyChanged(string propertyName)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("if (PropertyChanged != null)");
		PushIndent("\t");
		WriteLine("PropertyChanged(this, new PropertyChangedEventArgs(propertyName));");
		PopIndent();
		PopIndent();
		WriteLine("}");

		WriteLine("protected virtual void RaisePropertyChanging(string propertyName)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("if (PropertyChanging != null)");
		PushIndent("\t");
		WriteLine("PropertyChanging(this, new PropertyChangingEventArgs(propertyName));");
		PopIndent();
		PopIndent();
		WriteLine("}");
		WriteLine("");

		WriteLine("protected virtual void ChangeProperty<T>(string propertyName, ref T propertyValue, T newValue, Action<T, T> changingCallback = null, Action<T, T> changedCallback = null)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("if ((propertyValue == null && newValue == null) || (propertyValue != null && propertyValue.Equals(newValue))) return;");
        WriteLine("T oldValue = propertyValue;");
        WriteLine("if (changingCallback != null) changingCallback(oldValue, newValue);");
		WriteLine("RaisePropertyChanging(propertyName);");
		WriteLine("propertyValue = newValue;");
		WriteLine("RaisePropertyChanged(propertyName);");
        WriteLine("if (changedCallback != null) changedCallback(oldValue, newValue);");
		PopIndent();
		WriteLine("}");
		WriteLine("");

        WriteLine("public string GetPropertyName<TProperty>(Expression<Func<" + codeClass.FullName + ", TProperty>> propertySelector)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("var memberExpression = propertySelector.Body as MemberExpression;");
        WriteLine("if (memberExpression == null)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("var unaryExpression = propertySelector.Body as UnaryExpression;");
        WriteLine("if (unaryExpression != null)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("memberExpression = unaryExpression.Operand as MemberExpression;");
        WriteLine("if (memberExpression == null)");
		PushIndent("\t");
		WriteLine("throw new NotSupportedException();");
		PopIndent();
		PopIndent();
		WriteLine("}");
		WriteLine("else");
		PushIndent("\t");
        WriteLine("throw new NotSupportedException();");
		PopIndent();
		PopIndent();
        WriteLine("}");
		WriteLine("return memberExpression.Member.Name;");
		PopIndent();
        WriteLine("}");

		WriteLine("");
		WriteLine("//ncrunch: no coverage end");
		WriteLine("#endregion");
	}

#>