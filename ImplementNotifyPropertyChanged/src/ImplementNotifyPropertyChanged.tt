<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ include file="T4Toolbox.tt" #>
<#@ output extension=".Generated.cs" #>
<#
	if (Session.ContainsKey("InputFileName"))
	{
		FileCodeModel codeModel = GetCodeModel(Session["InputFileName"] as string);

		//WriteLine("/*");
		//DumpElements(codeModel.CodeElements);
		//WriteLine("*/");

		OutputUsings();

		ProcessElements(codeModel.CodeElements);
	} else {
		WriteLine("using System;");
		WriteLine("");
		WriteLine("//ncrunch: no coverage start");
		WriteLine("namespace " + ImplementNotifyPropertyChangedAttributeNamespace);
		WriteLine("{");
		PushIndent("\t");
		WriteLine("[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]");
		WriteLine("internal class " + ImplementNotifyPropertyChangedAttributeName + " : Attribute");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("public " + ImplementNotifyPropertyChangedAttributeName + "(Type aInterface)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("Interface = aInterface;");
		PopIndent();
        WriteLine("}");

        WriteLine("public Type Interface { get; private set; }");
		PopIndent();
        WriteLine("}");
		PopIndent();
        WriteLine("}");
		WriteLine("//ncrunch: no coverage end");
	}
#>
<#+
	const string ImplementNotifyPropertyChangedAttributeNamespace = "TemplateAttributes";
	const string ImplementNotifyPropertyChangedAttributeName = "ImplementNotifyPropertyChangedAttribute";
	const string ImplementNotifyPropertyChangedAttributeFullName = ImplementNotifyPropertyChangedAttributeNamespace + "." + ImplementNotifyPropertyChangedAttributeName;

	private void OutputUsings() 
	{
		WriteLine("using System;");
		WriteLine("using System.ComponentModel;");
		WriteLine("using System.Linq;");
		WriteLine("using System.Linq.Expressions;");
		WriteLine("");
	}

	private FileCodeModel GetCodeModel(string filename)
	{
		var dte = (DTE)TransformationContext.Current.GetService(typeof(DTE));
		ProjectItem projectItem = dte.Solution.FindProjectItem(filename);
		return projectItem.FileCodeModel;
	}

	private void ProcessElements(CodeElements elements)
	{
		bool firstElement = true;
		foreach (CodeElement element in elements)
		{
			CodeNamespace codeNamespace = element as CodeNamespace;
			CodeClass codeClass = element as CodeClass;
			if (codeNamespace != null) 
			{
				ProcessNamespace(codeNamespace, !firstElement);
				firstElement = false;
			} else if (codeClass != null)
			{
				ProcessClass(codeClass, !firstElement);
				firstElement = false;
			}
		}
	}

	private void ProcessNamespace(CodeNamespace codeNamespace, bool emptyLineBefore)
	{
		if (emptyLineBefore) WriteLine("");
		WriteLine("namespace " + codeNamespace.Name);
		WriteLine("{");
		PushIndent("\t");
		ProcessElements(codeNamespace.Children);
		PopIndent();
		WriteLine("}");
	}

	private void ProcessClass(CodeClass codeClass, bool emptyLineBefore)
	{
		if (!IsPartialClass(codeClass)) return;

		List<CodeInterface> interfaces = GetClassNotifyInterfaces(codeClass);
		bool implementNotifyPropertyChanged = interfaces.Count > 0;

		OutputClassHeader(codeClass, emptyLineBefore, implementNotifyPropertyChanged);

		if (implementNotifyPropertyChanged)
		{
			List<CodeFunction> changeMethods = GetClassChangeMethodes(codeClass);
			OutputClassProperties(codeClass, interfaces, changeMethods);
		}

		bool firstElement = true;
		foreach (CodeElement element in codeClass.Children)
		{
			CodeClass innerCodeClass = element as CodeClass;
			if (innerCodeClass != null)
			{
				ProcessClass(innerCodeClass, !firstElement);
				firstElement = false;
			}
		}

		if (implementNotifyPropertyChanged)
			OutputClassNotifyPropertyChangedImplementation(codeClass);

		OutputClassFooter(codeClass);
	}

	private bool IsPartialClass(CodeClass codeClass)
	{
		EnvDTE80.CodeClass2 codeClass2 = codeClass as EnvDTE80.CodeClass2;
		return (codeClass2 != null) && (codeClass2.ClassKind == EnvDTE80.vsCMClassKind.vsCMClassKindPartialClass);
	}

	private List<CodeInterface> GetClassNotifyInterfaces(CodeClass codeClass)
	{
		List<CodeInterface> list = new List<CodeInterface>();
		foreach (CodeInterface iface in codeClass.ImplementedInterfaces)
		{
            if (ClassHasAttributeForInterface(codeClass, iface.Name))
				list.Add(iface);
		}
		return list;
	}

	private bool ClassHasAttributeForInterface(CodeClass codeClass, string interfaceName)
	{
		string attrValue = "typeof(" + interfaceName + ")";
		foreach (CodeAttribute codeAttribute in codeClass.Attributes)
        {
            if (codeAttribute.FullName == ImplementNotifyPropertyChangedAttributeFullName && codeAttribute.Value == attrValue) return true;
        }
		return false;
	}

	private List<CodeFunction> GetClassChangeMethodes(CodeClass codeClass)
	{
		List<CodeFunction> list = new List<CodeFunction>();
		foreach (CodeElement element in codeClass.Members)
		{
			CodeFunction codeFunction = element as CodeFunction;
			if (codeFunction != null && codeFunction.Name.StartsWith("On") && (codeFunction.Name.EndsWith("Changed") || codeFunction.Name.EndsWith("Changing")))
			{
				list.Add(codeFunction);
			}
		}
		return list;
	}

	private void OutputClassHeader(CodeClass codeClass, bool emptyLineBefore, bool implementNotifyPropertyChanged)
	{
		if (emptyLineBefore) WriteLine("");
		WriteLine("[System.CodeDom.Compiler.GeneratedCodeAttribute(\"ImplementNotifyPropertyChanged.tt\", \"\")]");
		WriteLine("[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]");
		if (implementNotifyPropertyChanged)
			WriteLine("partial class " + codeClass.Name + ": INotifyPropertyChanged, INotifyPropertyChanging");
		else
			WriteLine("partial class " + codeClass.Name);
		WriteLine("{");
		PushIndent("\t");
	}

	private void OutputClassProperties(CodeClass codeClass, IEnumerable<CodeInterface> interfaces, List<CodeFunction> changeMethods)
	{
		foreach (CodeInterface iface in interfaces)
            OutputInterfaceProperties(iface, changeMethods);
	}

	private void OutputInterfaceProperties(CodeInterface codeInterface, List<CodeFunction> changeMethods)
	{
		foreach (CodeElement element in codeInterface.Members)
		{
			CodeProperty codeProperty = element as CodeProperty;
			if (codeProperty != null)
			{
				OutputProperty(codeProperty, changeMethods, codeProperty.Setter == null);
				WriteLine("");
			}
		}
	}

	private void OutputProperty(CodeProperty codeProperty, List<CodeFunction> changeMethods, bool setterPrivate)
	{
		string propertyTypeName = codeProperty.Type.CodeType.FullName;
		string storeName = "_" + codeProperty.Name;
		WriteLine("private " + propertyTypeName + " " + storeName + ";");
		WriteLine("public " + propertyTypeName + " " + codeProperty.Name);
		WriteLine("{");
		PushIndent("\t");

		if (codeProperty.Getter != null)
			WriteLine("get { return " + storeName + "; }");

		string changeCommand = "";
		if (setterPrivate)
			changeCommand += "private ";
		changeCommand += "set { ChangeProperty<" + propertyTypeName + ">(\"" + codeProperty.Name + "\", ref " + storeName + ", value";
		foreach(CodeFunction codeFunction in changeMethods)
		{
			if (codeFunction.Name == "On" + codeProperty.Name + "Changing")
				changeCommand += ", changingCallback: " + "On" + codeProperty.Name + "Changing";
			else if (codeFunction.Name == "On" + codeProperty.Name + "Changed")
				changeCommand += ", changedCallback: " + "On" + codeProperty.Name + "Changed";
		}
		changeCommand += "); }";
		WriteLine(changeCommand);

		PopIndent();
		WriteLine("}");
	}

	private void OutputClassNotifyPropertyChangedImplementation(CodeClass codeClass)
	{
		WriteLine("");
		WriteLine("#region INotifyPropertyChanged implementation");
		WriteLine("//ncrunch: no coverage start");
		WriteLine("");
		WriteLine("public event PropertyChangedEventHandler PropertyChanged;");
		WriteLine("public event PropertyChangingEventHandler PropertyChanging;");
		WriteLine("protected virtual void RaisePropertyChanged(string propertyName)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("if (PropertyChanged != null)");
		PushIndent("\t");
		WriteLine("PropertyChanged(this, new PropertyChangedEventArgs(propertyName));");
		PopIndent();
		PopIndent();
		WriteLine("}");

		WriteLine("protected virtual void RaisePropertyChanging(string propertyName)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("if (PropertyChanging != null)");
		PushIndent("\t");
		WriteLine("PropertyChanging(this, new PropertyChangingEventArgs(propertyName));");
		PopIndent();
		PopIndent();
		WriteLine("}");
		WriteLine("");

		WriteLine("protected virtual void ChangeProperty<T>(string propertyName, ref T propertyValue, T newValue, Action<T, T> changingCallback = null, Action<T, T> changedCallback = null)");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("if ((propertyValue == null && newValue == null) || (propertyValue != null && propertyValue.Equals(newValue))) return;");
        WriteLine("T oldValue = propertyValue;");
        WriteLine("if (changingCallback != null) changingCallback(oldValue, newValue);");
		WriteLine("RaisePropertyChanging(propertyName);");
		WriteLine("propertyValue = newValue;");
		WriteLine("RaisePropertyChanged(propertyName);");
        WriteLine("if (changedCallback != null) changedCallback(oldValue, newValue);");
		PopIndent();
		WriteLine("}");
		WriteLine("");

        WriteLine("public string GetPropertyName<TProperty>(Expression<Func<" + codeClass.FullName + ", TProperty>> propertySelector)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("var memberExpression = propertySelector.Body as MemberExpression;");
        WriteLine("if (memberExpression == null)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("var unaryExpression = propertySelector.Body as UnaryExpression;");
        WriteLine("if (unaryExpression != null)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("memberExpression = unaryExpression.Operand as MemberExpression;");
        WriteLine("if (memberExpression == null)");
		PushIndent("\t");
		WriteLine("throw new NotSupportedException();");
		PopIndent();
		PopIndent();
		WriteLine("}");
		WriteLine("else");
		PushIndent("\t");
        WriteLine("throw new NotSupportedException();");
		PopIndent();
		PopIndent();
        WriteLine("}");
		WriteLine("return memberExpression.Member.Name;");
		PopIndent();
        WriteLine("}");

		WriteLine("");
		WriteLine("//ncrunch: no coverage end");
		WriteLine("#endregion");
	}

	private void OutputClassFooter(CodeClass codeClass)
	{
		PopIndent();
		WriteLine("}");
	}

	private void DumpElements(CodeElements elements)
	{
		foreach (CodeElement element in elements)
		{
			string elDump = element.Kind.ToString();
			if (element.Kind == vsCMElement.vsCMElementNamespace || element.Kind == vsCMElement.vsCMElementClass)
				elDump += ": " + element.Name;
			elDump += " -> " + element.Children.Count.ToString();
			WriteLine(elDump);
			DumpElements(element.Children);
		}
	}
#>