<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ include file="T4Toolbox.tt" #>
<#@ output extension=".Generated.cs" #>
<#@ include file="CodeModelUtils.ttinclude" #>
<#
	if (Session.ContainsKey("InputFileName"))
	{
		FileCodeModel codeModel = GetCodeModel(Session["InputFileName"] as string);

		//WriteLine("/*"); DumpElements(codeModel.CodeElements); WriteLine("*/");

		OutputUsings();

		ProcessElements(codeModel, codeModel.CodeElements);
	} else {
		WriteLine("using System;");
		WriteLine("");
		WriteLine("//ncrunch: no coverage start");
		WriteLine("namespace " + ImplementDependencyPropertiesAttributeNamespace);
		WriteLine("{");
		PushIndent("\t");
		WriteLine("[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]");
		WriteLine("internal class " + ImplementDependencyPropertiesAttributeName + " : Attribute");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("public " + ImplementDependencyPropertiesAttributeName + "(Type aInterface)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("Interface = aInterface;");
		PopIndent();
        WriteLine("}");
        WriteLine("public Type Interface { get; private set; }");
		PopIndent();
        WriteLine("}");

        WriteLine("");
		WriteLine("[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)]");
		WriteLine("internal class " + ImplementAttachedDependencyPropertiesAttributeName + " : Attribute");
		WriteLine("{");
		PushIndent("\t");
		WriteLine("public " + ImplementAttachedDependencyPropertiesAttributeName + "(Type aInterface)");
        WriteLine("{");
		PushIndent("\t");
        WriteLine("Interface = aInterface;");
		PopIndent();
        WriteLine("}");

        WriteLine("public Type Interface { get; private set; }");
		PopIndent();
        WriteLine("}");
		PopIndent();
        WriteLine("}");
		WriteLine("//ncrunch: no coverage end");
	}
#>
<#+
	const string ImplementDependencyPropertiesAttributeNamespace = "TemplateAttributes";
	const string ImplementDependencyPropertiesAttributeName = "ImplementDependencyPropertiesAttribute";
	const string ImplementDependencyPropertiesAttributeFullName = ImplementDependencyPropertiesAttributeNamespace + "." + ImplementDependencyPropertiesAttributeName;
	const string ImplementAttachedDependencyPropertiesAttributeName = "ImplementAttachedDependencyPropertiesAttribute";
	const string ImplementAttachedDependencyPropertiesAttributeFullName = ImplementDependencyPropertiesAttributeNamespace + "." + ImplementAttachedDependencyPropertiesAttributeName;

	private void OutputUsings() 
	{
		WriteLine("using System;");
		WriteLine("using System.ComponentModel;");
		WriteLine("using System.Linq;");
		WriteLine("using System.Linq.Expressions;");
		WriteLine("using System.Windows;");
		WriteLine("");
	}

	private void ProcessClass(FileCodeModel codeModel, CodeClass codeClass, bool emptyLineBefore)
	{
		if (!IsPartialClass(codeClass)) return;

		if (emptyLineBefore) WriteLine("");
		OutputClassHeader(codeClass);

		List<CodeFunction> changeMethods = GetClassChangeMethods(codeClass);
		List<CodeVariable> constants = GetClassConstants(codeClass);

		List<CodeInterface> interfaces = GetInterfacesToImplement(codeModel, codeClass, ImplementDependencyPropertiesAttributeFullName);
		if (interfaces.Count > 0)
		{
			foreach (CodeInterface iface in interfaces)
				OutputDependencyProperties(codeClass.Name, iface, changeMethods, constants);
		}

		interfaces = GetInterfacesToImplement(codeModel, codeClass, ImplementAttachedDependencyPropertiesAttributeFullName);
		if (interfaces.Count > 0)
		{
			foreach (CodeInterface iface in interfaces)
				OutputAttachedProperties(codeClass.Name, iface, changeMethods, constants);
		}

		bool firstElement = true;
		foreach (CodeElement element in codeClass.Children)
		{
			CodeClass innerCodeClass = element as CodeClass;
			if (innerCodeClass != null)
			{
				ProcessClass(codeModel, innerCodeClass, !firstElement);
				firstElement = false;
			}
		}

		OutputClassFooter(codeClass);
	}

	private List<CodeFunction> GetClassChangeMethods(CodeClass codeClass)
	{
		return GetClassFunctions(codeClass).Where(cf => cf.Name.StartsWith("On") && cf.Name.EndsWith("Changed")).ToList();
	}

	private List<CodeVariable> GetClassConstants(CodeClass codeClass)
	{
		return GetClassVariables(codeClass).Where(cf => (cf.IsConstant || cf.IsShared)).ToList();
	}

	private void OutputDependencyProperties(string className, CodeInterface codeInterface, List<CodeFunction> changeMethods, List<CodeVariable> constants)
	{
		WriteLine("#region " + codeInterface.Name);
		WriteLine("");
		foreach (CodeProperty codeProperty in codeInterface.Members.OfType<CodeProperty>())
		{
			OutputProperty(className, codeProperty, changeMethods, constants, codeProperty.Setter == null, false);
			WriteLine("");
		}
		WriteLine("#endregion");
	}

	private void OutputAttachedProperties(string className, CodeInterface codeInterface, List<CodeFunction> changeMethods, List<CodeVariable> constants)
	{
		WriteLine("#region " + codeInterface.Name);
		WriteLine("");
		foreach (CodeProperty codeProperty in codeInterface.Members.OfType<CodeProperty>())
		{
			OutputProperty(className, codeProperty, changeMethods, constants, codeProperty.Setter == null, true);
			WriteLine("");
		}
		WriteLine("#endregion");
	}

	private void OutputProperty(string className, CodeProperty codeProperty, List<CodeFunction> changeMethods, List<CodeVariable> constants, bool setterPrivate, bool isAttached)
	{
		string propertyTypeName = codeProperty.Type.CodeType.FullName;
		string dependencyPropertyName = codeProperty.Name + "Property";

		WriteLine("public static readonly DependencyProperty " + dependencyPropertyName + " = ");
		PushIndent("\t");
		if (isAttached)
	        WriteLine("DependencyProperty.RegisterAttached(\"" + codeProperty.Name + "\", typeof(" + propertyTypeName + "), typeof(" + className + "),");
        else
	        WriteLine("DependencyProperty.Register(\"" + codeProperty.Name + "\", typeof(" + propertyTypeName + "), typeof(" + className + "),");

		WriteLine(GetMetadataConstructor(className, propertyTypeName, codeProperty, changeMethods, constants, isAttached) + ");");
		PopIndent();
		WriteLine("");

		if (isAttached)
        {
			WriteLine("public static " + propertyTypeName + " Get" + codeProperty.Name + "(DependencyObject obj)");
			WriteLine("{");
			PushIndent("\t");
            WriteLine("return (" + propertyTypeName + ")obj.GetValue(" + dependencyPropertyName + ");");
			PopIndent();
			WriteLine("}");
			WriteLine("");
			WriteLine("public static void Set" + codeProperty.Name + "(DependencyObject obj, " + propertyTypeName + " value)");
			WriteLine("{");
			PushIndent("\t");
            WriteLine("obj.SetValue(" + dependencyPropertyName + ", value);");
			PopIndent();
			WriteLine("}");
			WriteLine("");
        }
		else
        {
			WriteLine("public " + propertyTypeName + " " + codeProperty.Name);
			WriteLine("{");
			PushIndent("\t");

			if (codeProperty.Getter != null)
				WriteLine("get { return (" + propertyTypeName + ")GetValue(" + dependencyPropertyName + "); }");

			string changeCommand = "";
			if (setterPrivate)
				changeCommand += "private ";
			changeCommand += "set { SetValue(" + dependencyPropertyName + ", value); }";
			WriteLine(changeCommand);

			PopIndent();
			WriteLine("}");
		}
	}

	private string GetMetadataConstructor(string className, string propertyTypeName, CodeProperty codeProperty, List<CodeFunction> changeMethods, List<CodeVariable> constants, bool isAttached)
    {
    	CodeVariable codeVariable = constants.FirstOrDefault(cf => cf.Name.Replace("_", "").Equals(codeProperty.Name + "DefaultValue", StringComparison.InvariantCultureIgnoreCase));
		string defaultValue = (codeVariable != null) ? codeVariable.Name : null;
		codeVariable = constants.FirstOrDefault(cf => cf.Name.Replace("_", "").Equals(codeProperty.Name + "Options", StringComparison.InvariantCultureIgnoreCase));
		string metadataOptions = (codeVariable != null) ? codeVariable.Name : null;
		string metadataParams = "";

		if (defaultValue != null)
			metadataParams += defaultValue;
		else if (metadataOptions != null)
			metadataParams += "default(" + propertyTypeName + ")";

		if (metadataOptions != null)
			metadataParams += ", " + metadataOptions;

		CodeFunction changeFunction = changeMethods.FirstOrDefault(cf => cf.Name == "On" + codeProperty.Name + "Changed");
		if (changeFunction != null)
		{
			if (changeFunction.IsShared || isAttached)
				metadataParams += ", " + changeFunction.Name;
			else
			{
				if (changeFunction.Parameters.Count == 2)
					metadataParams += ", (d, e) => ((" + className + ")d)." + changeFunction.Name + "((" + propertyTypeName + ")e.OldValue, (" + propertyTypeName + ")e.NewValue)";
				else
					metadataParams += ", (d, e) => ((" + className + ")d)." + changeFunction.Name + "()";
			}
		}

		metadataParams = metadataParams.Trim(new char[] {' ', ','});

		if (metadataOptions != null)
			return "new FrameworkPropertyMetadata(" + metadataParams + ")";
		else
			return "new PropertyMetadata(" + metadataParams + ")";
    }
#>